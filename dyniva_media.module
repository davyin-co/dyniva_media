<?php
/**
 * Dyniva Media
 */

use Drupal\lightning_core\OverrideHelper as Override;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\NestedArray;
use Drupal\dyniva_media\Form\MediaForm;
use Drupal\Core\GeneratedLink;

/**
 * Implements hook_entity_type_alter().
 */
function dyniva_media_entity_type_alter(array &$entity_types) {
  if (\Drupal::moduleHandler()->moduleExists('media')) {
    Override::entityForm($entity_types['media'], MediaForm::class);
    Override::entityForm($entity_types['media'], MediaForm::class, 'edit');
  }
}

/**
 * Implements hook_preprocess_THEME().
 */
function dyniva_media_preprocess_image_style(&$variables) {
  if(isset($variables['image']['#uri']) && preg_match('/\?itok=\w+$/', $variables['image']['#uri'])) {
    $variables['image']['#uri'] .= '&_='.substr(md5($variables['width']+$variables['height']), 0, 8);
  }
}

/**
 * Implements hook_preprocess_THEME().
 */
function dyniva_media_preprocess_image_formatter(&$variables) {
  if(isset($variables['url']) && strpos($variables['url']->toString(), '?') === false) {
    $variables['url']->setOption('query', ['_' => substr(md5($variables['image']['#width']+$variables['image']['#height']), 0, 8)]);
  }
}

/**
 * Implements hook_preprocess_THEME().
 */
function dyniva_media_preprocess_file_link(&$variables) {
  $matches = [];
  if(isset($variables['link']) && $variables['link'] instanceof GeneratedLink && preg_match('/href="([^"]+)"/', $variables['link']->getGeneratedLink(), $matches)) {
    $url = $matches[1];
    if(strpos($url, '?') === false && $variables['file']->filesize->value) {
      $url = str_replace($url, $url.'?_='.substr(md5($variables['file']->filesize->value), 0, 8), $variables['link']->getGeneratedLink());
      $variables['link']->setGeneratedLink($url);
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function dyniva_media_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    // Move our hook_entity_type_alter() implementation to the end of the list.
    case 'entity_type_alter':
      $group = $implementations['dyniva_media'];
      unset($implementations['dyniva_media']);
      $implementations['dyniva_media'] = $group;
      break;
  }
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function dyniva_media_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  // Skip some fields.
  if (!in_array($field_definition->getName(), ['authored_by', 'authored_on', 'title', 'path', 'comment',])) {
    if(in_array($field_definition->getType(), ['image', 'file'])) {
      $element = [
        'rename' => [
          '#type' => 'checkbox',
          '#title' => t('File rename'),
          '#default_value' => $plugin->getThirdPartySetting('dyniva_media', 'rename', FALSE),
        ],
      ];
      return $element;
    }
  }
  return [];
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function dyniva_media_field_widget_settings_summary_alter(&$summary, $context) {
  if ($context['widget']->getThirdPartySetting('dyniva_media', 'rename')) {
    $summary[] = t('File rename enabled.');
  }
}

/**
 * Implements hook_form_alter().
 */
function dyniva_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if(preg_match('/^media_/', $form_id)) {
    $formObject = $form_state->getFormObject();
    if($formObject instanceof \Drupal\media\MediaForm) {
      $entity = $form_state->getFormObject()->getEntity();
      if($entity instanceof \Drupal\media\Entity\Media) {
        // Append submit function
        foreach (array_keys($form['actions']) as $action) {
          if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
            $form['#validate'][] = '_dyniva_media_validate';
            $form['actions'][$action]['#submit'][] = '_dyniva_media_submit';
            break;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function dyniva_media_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $plugin = $context['widget'];

  if (!$plugin->getThirdPartySetting('dyniva_media', 'rename')) return;
  if ($element['#cardinality'] > 1) return;

  $field_definition = $context['items']->getFieldDefinition();
  $type = $field_definition->getType();

  if (in_array($type, ['image', 'file'])) {
    $element['#process'][] = ['Drupal\dyniva_media\Plugin\Field\FieldWidget\FileMediaWidget', 'process'];
  }
}

function _dyniva_media_validate(&$form, FormStateInterface $form_state) {
  foreach ($form_state->getValues() as $key => $items) {
    if (!is_array($items)) {
      continue;
    }
    foreach ($items as $item) {
      if (empty($item['custom_uri']) || empty($item['original_uri'])) {
        continue;
      }
      // Do rename for user
      $custom_uri = $item['custom_uri'];
      $uri = $item['original_uri'];
      $schema = file_uri_scheme($uri) . '://';
      $custom_uri = $schema . $custom_uri;
      if($uri != $custom_uri && $item['fids']){
        $fid = reset($item['fids']);
        /** @var \Drupal\file\Entity\File $file */
        $file = File::load($fid);
        $extension = pathinfo($file->getFilename())['extension'] ?? '';
        $dist_extension = pathinfo($custom_uri)['extension'] ?? '';
        if($extension != $dist_extension) {
          $form_state->setError($form[$key], t('Only file uri with the following extensions are allowed').': '.$extension);
        }
      }
    }
  }
}

/**
 * Submit.
 */
function _dyniva_media_submit(&$form, FormStateInterface $form_state) {
  foreach ($form_state->getValues() as $items){
    if(!is_array($items)) continue;
    foreach($items as $item) {
      if(empty($item['custom_uri']) || empty($item['original_uri'])){
        continue;
      }
      // Do rename for user
      $custom_uri = $item['custom_uri'];
      $uri = $item['original_uri'];
      $schema = file_uri_scheme($uri) . '://';
      $custom_uri = $schema . $custom_uri;
      if($uri != $custom_uri && $item['fids']){
        $fid = reset($item['fids']);
        /** @var \Drupal\file\Entity\File $file */
        $file = File::load($fid);
//        $extension = pathinfo($file->getFilename())['extension'] ?? '';
//        $dist_extension = pathinfo($custom_uri)['extension'] ?? '';
//        if($extension != $dist_extension) {
//          return;
//        }
        file_prepare_directory(pathinfo($custom_uri)['dirname'], FILE_CREATE_DIRECTORY);
        if($file && file_unmanaged_move($uri,$custom_uri,FILE_EXISTS_REPLACE)) {
          $file->setFileUri($custom_uri);
          $file->setFileName(pathinfo($custom_uri)['basename']);
          $file->save();
        }
      }
    }
  }
}

/**
 * Validate File Uri
 * @see dyniva_media_field_widget_form_alter
 */
function dyniva_media_validateFileUri(array $element, FormStateInterface $form_state) {
  // Only do validation if the function is triggered from other places than
  // the image process form.
  $triggering_element = $form_state->getTriggeringElement();
  if (empty($triggering_element['#submit']) || !in_array('file_managed_file_submit', $triggering_element['#submit'])) {
    // If the image is not there, we do not check for empty values.
    $parents = $element['#parents'];
    $field = array_pop($parents);
    $field_input = NestedArray::getValue($form_state->getUserInput(), $parents);
    $custom_uri = $field_input['custom_uri'];
    $uri = $field_input['original_uri'];
    $schema = file_uri_scheme($uri) . '://';
    $custom_uri = $schema . $custom_uri;
    if(!file_valid_uri($custom_uri)){
      $form_state->setError($element,t("Invalid uri."));
    }
    if($uri != $custom_uri){
      $exists = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $custom_uri]);
      if(!empty($exists) ){
        $file = reset($exists);
        if($file->isTemporary()){
          $file->delete();
        }else{
          $entity = $form_state->getFormObject()->getEntity();
          if ($entity->isNew()) {
            // Is new and file exists, throw error
            $form_state->setError($element,t("The file with uri '@uri' is already exist.",['@uri' => $custom_uri]));
            return;
          } else {
            // If not new and file exists
            // 判断存在文件是否自己版本内的文件
            $entity_type = $entity->getEntityType();
            $revision_table = $entity_type->getRevisionTable();
            $query = db_select("{$revision_table}__{$element['#field_name']}",'t')
            ->condition('t.entity_id',$entity->id());
            $query->addField('t', "{$element['#field_name']}_target_id");
            $fids = $query->execute()->fetchCol();
            if(in_array($file->id(), $fids)) {
              // If in my revision, old file rename
              $parts = pathinfo($file->getFileUri());
              $filename = $parts['filename'].'_'.$file->id();
              if(file_uri_scheme($file->getFileUri()).':' == $parts['dirname']) {
                $newpath = "{$parts['dirname']}//$filename.{$parts['extension']}";
              } else {
                $newpath = "{$parts['dirname']}/$filename.{$parts['extension']}";
              }
              $_exists = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $newpath]);
              $n = 1;
              while(!empty($_exists)) {
                $filename = $parts['filename'].'_'.$n++;
                if(file_uri_scheme($file->getFileUri()).':' == $parts['dirname']) {
                  $newpath = "{$parts['dirname']}//$filename.{$parts['extension']}";
                } else {
                  $newpath = "{$parts['dirname']}/$filename.{$parts['extension']}";
                }
                $_exists = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $newpath]);
              }
              file_move($file, $newpath);
            } else {
              $form_state->setError($element,t("The file with uri '@uri' is already exist.",['@uri' => $custom_uri]));
              return;
            }
          }
        }
      }
    }
  }
  else {
    $form_state->setLimitValidationErrors([]);
  }
}
